/*
* Author:	Sebastian Wolf
* Created:	August 2018
*/

#include <Arduino.h>
#include "Zusi3Schnittstelle.h"

//Bitte die #define der Zusi3Schnittstelle.h nutzen
#if defined(ESP8266_Wifi) || defined(ESP32_Wifi)
const char *ssid = "InternetOfShit";
const char *password = "Atlas2012";
#endif
#ifdef ESP32_Ethernet
//nothing
#endif
#ifdef Ethernet_Shield //Arduino Uno hat zu wenig RAM fÃ¼r Datenpakete
byte *mac = new byte[6]{0x8c, 0x16, 0x45, 0x81, 0xfc, 0x72};
#endif
#ifdef AVR_Wifi
const char *ssid = "InternetOfShit";
const char *password = "Atlas2012";
#endif

Zusi3Schnittstelle *zusi;

void setup()
{
	Serial.begin(115200);

#if defined(ESP8266_Wifi) || defined(ESP32_Wifi)
	Serial.print("Verbinde mit ");
	Serial.println(ssid);

	WiFi.mode(WIFI_STA);
	WiFi.begin(ssid, password);

	while (WiFi.status() != WL_CONNECTED)
	{
		delay(500);
		Serial.print(".");
	}

	Serial.println("\nVerbunden");
	Serial.print("IP-Adresse: ");
	Serial.println(WiFi.localIP());
#endif

#ifdef ESP32_Ethernet
	ETH.begin();
#endif

#ifdef Ethernet_Shield
	if (Ethernet.begin(mac) == 0)
	{
		Serial.println("Failed to configure Ethernet using DHCP");
		return;
	}
	else
	{
		Serial.print("IP-Adresse: ");
		Serial.println(Ethernet.localIP());
	}
#endif

#ifdef AVR_Wifi
	if (WiFi.status() == WL_NO_SHIELD)
	{
		Serial.println("WiFi shield nicht vorhanden");
		return;
	}
	WiFi.begin(ssid, password);
	while (WiFi.status() != WL_CONNECTED)
	{
		delay(500);
		Serial.print(".");
	}
	Serial.println("\nVerbunden");
	Serial.print("IP-Adresse: ");
	Serial.println(WiFi.localIP());
#endif

	zusi = new Zusi3Schnittstelle("192.168.0.2", 1436, "ESP32");
	zusi->reqFstAnz(Druck_Hauptluftleitung);
	zusi->reqFstAnz(Druck_Hauptluftbehaelter);
	zusi->reqFstAnz(Druck_Bremszylinder);
	zusi->requestFuehrerstandsbedienung(false);
	zusi->requestProgrammdaten(false);
	uint32_t i = 0;
	while (!zusi->connect())
	{
		Serial.print("Verbindung zu Zusi fehlgeschlagen (");
		Serial.print(++i);
		Serial.println(")");
		delay(1000);
	}
	Serial.println("Verbunden mit Zusi");
}

void loop()
{
	Node *node = zusi->update();
	if (node != NULL)
	{
		for (int i = 0; i < node->getNodes()->size(); i++)
		{
			Node *subNode = node->getNodes()->get(i);
			if (subNode->getIDAsInt() == 0x0A)
			{
				for (int j = 0; j < subNode->getAttribute()->size(); j++)
				{
					Attribute *attr = subNode->getAttribute()->get(j);
					if (attr->getIDAsInt() == Druck_Hauptluftleitung)
					{
						Serial.print("Druck_Hauptluftleitung: ");
						Serial.print((int)(attr->getDATAAsFloat()));
						Serial.println(" bar");
					}
				}
				for (int j = 0; j < subNode->getAttribute()->size(); j++)
				{
					Attribute *attr = subNode->getAttribute()->get(j);
					if (attr->getIDAsInt() == Druck_Hauptluftbehaelter)
					{
						Serial.print("Druck_Hauptluftbehaelter: ");
						Serial.print((int)(attr->getDATAAsFloat()));
						Serial.println(" bar");
					}
				}
				for (int j = 0; j < subNode->getAttribute()->size(); j++)
				{
					Attribute *attr = subNode->getAttribute()->get(j);
					if (attr->getIDAsInt() == Druck_Bremszylinder)
					{
						Serial.print("Druck_Bremszylinder: ");
						Serial.print((int)(attr->getDATAAsFloat()));
						Serial.println(" bar");
					}
				}
			}
		}
	}
}
